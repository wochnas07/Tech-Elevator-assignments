---------------------------------------------------------------------------------------------------------------
--
-- DROP - remove a table and all it's data from the database
--
-- Consider referential constraints - cannot drop a parent if it has dependents
--
--      DROP TABLE table-name             - Will fail if table does not exist or if it has dependents
--
--      DROP TABLE IF EXISTS table-name   - Will run whether table exists or not; will fail if table has dependents
--
--      DROP TABLE IF EXISTS table-name  CASCADE   - Will run whether table exists or not and whether has dependents or not
--
--
--  CREATE - define a table to the database manager
--
--       CREATE TABLE table-name
--       (column-name     dat√üa-type    NOT NULL,
--        column-name     data-type,
--        column-name     data-type    DEFAULT   default-value,
--        column-name     data-type    UNIQUE,
--        CONSTRAINT constraint-name PRIMARY KEY (column(s)-in-table),
--        CONSTRAINT constraint-name FOREIGN KEY(for-key-column(s)) REFERENCES parent-table(pri-key-column(s)),
--        CONSTRAINT consraint-name  CHECK (where-predicate)
--       )
--
--       Note: CONTRAINT is part of the set of column definitions (i.e. inside the parens for column specification)
--
-- 
-- ALTER - changing the definition of a table
--
-- Commonly used to add/remove constraints on tables or change existing table attributes
--
--
-- Add a FOREIGN KEY - Establish Parent/Dependant relationship
--
-- FOREIGN KEY must have the same-number, same-order, compatible-data-type as entire PRIMARY KEY of parent
--             and must have a matching value in the PRIMARY KEY in the parent table
--
-- When adding FOREIGN KEY after data has been loaded into table, all FOREIGN KEY values must have a match in parent
--
--      ALTER TABLE dependent-table-name ADD FOREIGN KEY(for-key-column(s)) REFERENCES parent-table(pri-key-column(s)) 
--
-- Remove a constraint from a table
--
--      ALTER TABLE table-name DROP CONSTRAINT constraint_name
--
--
-- Add a column to an existing table
--
-- Cannot add a NOT NULL column to a table with existing data
--
--      ALTER TABLE table-name ADD COLUMN new_column_name data_type constraint
--
--
-- Rename an existing column in a table
--
--      ALTER TABLE table-name RENAME column-name TO new-column-name;
--
--
-- Rename a table
--
--      ALTER TABLE table-name RENAME TO new-table-name  - Will fail if table does not exist
--
--      ALTER TABLE IF EXISTS table-name RENAME TO new-table-name  - Successful if table exists or not
--
---------------------------------------------------------------------------------------------------------------
--
-- Drop any tables we are creating in this SQL file
--
-- if table has dependents, it cannot be dropped unless you the cascade option to the drop
--
-- cascade removes any dpenedent tables along with the parent
drop table if exists artist     cascade;           -- remove the artist table from the data base
drop table if exists paintings  cascade;           -- remove the paintings table from the data base
drop table if exists customer   cascade;           -- remove the customer table from the data base
drop table if exists purchase   cascade;           -- remove the purchase table from the data base
--
-- Create the artist table
--
create table artist
(
 artist_id serial               Not Null                -- serial indicates an integer value generated by database manager
 -- the number in () for character varying is the maximum size expected, it helps postgres allocate memory for the variable
 --     if you don't code the maxium size expected for character varying, it assumes the max is 32,767 (could be inefficient)
,artist_name character varying(50)      Not Null        -- not null indicates a value for the column is required
--          constraint-name     type        column(s)      constraint name can be called whatever you want
,constraint pk_artist_artist_id PRIMARY KEY(artist_id)
)
; 

--
-- creat the paintings table
--
create table paintings
(
 painting_id    serial
,artist_id      int     Not Null        -- int is used because artist_id in artist is a serial value
,painting_title character varying(100)
,constraint pk_paintings_painting_id primary key(painting_id)
-- CONSTRAINT FOREIGN KEY(for-key-column(s)) REFERENCES parent-table(pri-key-column(s))
,CONSTRAINT fk_artist_artist_id FOREIGN KEY(artist_id) REFERENCES artist(artist_id)
)
;     
--
-- create the customer table
--
create table customer
(  
 customer_id     serial
,customer_name  character varying(40)
,customer_address character varying (100)
,customer_city  character varying(25)
,customer_state character(2)            -- 2-char state code
,customer_phone character varying (12)           
,customer_zipcode character varying(10)
, constraint customer_constraint primary key(customer_id)
)
;
--
-- create the purchase table
--
create table purchase
(
 purchase_id    serial
,customer_id    integer Not Null        -- make an integer because it's a serial in the parent table customer
,painting_id    integer Not Null        -- make an integer because it's a serial in the parent table customer
,purchase_date  date    Not Null
,purchase_price numeric(10,0)          -- max value is 10 digits with no decimal places (1000000000)
                                        -- (12,2) would be 12 digits, including 2 decimal places
,constraint pk_purchase_purchase_id primary key(purchase_id)
)
;
--
-- Add an artist to artist table
--
insert into artist
(artist_name)
values('Jason')
;
--
-- When adding a FOREIGN KEY to a table, the parent table must already exist
--
-- To avoid worrying about the order in which you create tables, 
--      add the FOREIGN KEY constraint after all the tables (and load with data if you're adding data)
--
-- Use the ALTER statement to change the structure of the table after it has been created to avoid having to drop and recreate it
-- Dropping a table deleted all the data currently in the table, ALTER does not
--
--
-- Use ALTER to add FOREIGN KEY constraints to the tables
--
--FOREIGN KEY constraint establishes the Referential Integrity relationship to the data
--      the data base manager will apply constraints to each insert, update, and delete to either the parent or the dependent tables
--
ALTER TABLE paintings                           -- name of dependent table (has foreign key)
        ADD FOREIGN KEY(artist_id)              -- column(s) in the dependent table that comprise the foreign key
        REFERENCES artist(artist_id)            -- name of parent table and primary key in that table the foreign key matches
;        

ALTER TABLE purchase
        ADD FOREIGN KEY(customer_id)   
        REFERENCES customer(customer_id)
;

ALTER TABLE purchase
        ADD FOREIGN KEY(painting_id)
        REFERENCES paintings(painting_id)
;    
        
        